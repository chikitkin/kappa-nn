Установка:

Скачиваете архив скомпилированных библиотек: https://drive.google.com/open?id=0B2ZNHzDfp9RlcVVCcDZ5WF9ldjA
Скачиваете boost: http://www.boost.org/
А также файлы баз данных свойств частиц и их взаимодействий:

Ссылка на скачивание базы данных взаимодействий: https://drive.google.com/open?id=0B2ZNHzDfp9RlX0ZMSnlMTS1YcDA
Ссылка на скачивание базы данных частиц: https://drive.google.com/open?id=0B2ZNHzDfp9RlVkZpb3g1ck9oalE

Распаковываете архив скомпилированных библиотек.

Вариант создания проекта #1 (использовать готовые проекты):

Проект для Visual Studio 2015: https://drive.google.com/open?id=0B2ZNHzDfp9RlWUhKZjAwRlY4aTA
Проект для Visual Studio 2017: https://drive.google.com/open?id=0B2ZNHzDfp9RlaktkaWx2TTU1SWs

Скачиваете нужный проект, распаковываете в папку kappa-build. Должна быть следующая структура директорий:

|
|--boost (надо переименовать скачанный код библиотек boost, обычно он называется boost_<номер версии>)
	|
	|--boost
	|--doc
	|--libs
	|--и т.д.
|--kappa
	|
	|--docs
	|--legacy
	|--src
	|--tests
	|--utils
|--kappa-build
	|
	|--kappa.sln
	|--kappa.vcxproj
	|--kappa.vcxproj.filters
|--libs
	|
	|--armadillo
	|--yamllib
	|--yamllib-2015

В Visual Studio открываете Solution, в файлы исходного кода проекта добавляете файл с функцией main (остальные файлы должны уже быть на месте), например, что-нибудь из папки kappa/tests. Компилируете.

Если все удачно собралось, Visual Studio в выводе напишет, где лежит exe-файл. Скорее всего, что-то в духе Kappa-build/x64/Debug/Kappa.exe. 

Для работы программы также надо взять файлы lapack_win64_MT.dll и blas_win64_MT.dll из Armadillo/examples/lib_win64, скопировать их в директорию с запускаемым exe-файлом, а также скопировать в эту директорию файлы баз данных particles.yaml и interaction.yaml. Запускаете exe-файл, в консоли должны выводиться количества уровней различных степеней свободы.
Если собирали проект в конфигурации Debug, то сначала будет долго загружать данные, т.к. производится расчет энергий всех состояний. Если собирать в конфигурации Release, то все будет работать намного быстрее.



Вариант создания проекта #2 (вручную):

(Внутри папки libs есть папки armadillo и yamllib, дальше так и буду их называть. Если используется VS2015, то вместо директории yamllib нужно везде указывать yamllib-2015).

Создаете пустой C++ проект в Visual Studio. Проект Visual Studio надо держать в отдельной директории (не в Kappa). Например, у меня он в соседней папке с названием Kappa-build. Тогда меньше путаницы, где файлы проекта, а где исходного кода. Проект будет внутри папки Kappa-build

Настройки Visual Studio: все настройки, если отдельно не оговорено, для всех конфигураций сразу (и Debug, и Release) - обычно в окнах настроек есть выпадающий список "Конфигурация", в котором Debug, Release, Active и "Все конфигурации", поэтому надо выбирать последний пункт). 

 1. Делаете проект 64-битным: Открываете свойства вашего Solution, в разделе Configuration Properties (если Visual Studio русскоязычная, раздел "Свойства конфигурации" меню "Свойства"), в пункте "Платформа" выбираете x64

 2. В раздел "Header files" ("Заголовочные файлы") в дереве проекта добавить kappa.hpp (из папки Kappa/src)

3. В раздел "Source files" ("Файлы исходного кода") в дереве проекта добавить все файлы из папок Kappa/src/approximations, Kappa/src/Particles, а также файлы Interaction/interaction.cpp и numeric.cpp

4. В разделе C/C++ в пункте Include Directories ("Дополнительные каталоги включаемых файлов") добавляете папки Kappa/src, armadillo/include и yamllib/include

5. В разделе C/C++ - Preprocessor Definitions (C/C++ - Препроцессор - Определения препроцессора) добавляете ARMA_USE_LAPACK и ARMA_USE_BLAS (каждое - на новой строке)

6. В разделе Linker - General (Компоновщик - Общие) в меню Additional Library Directories (дополнительные каталоги библотек) добавляете папки armadillo/examples/lib_win64 и yamllib

7. В разделе Linker - Input (Компоновщик - Ввод) в меню Additional Dependencies (Дополнительные зависимости) добавляете lapack_win64_MT.lib и blas_win64_MT.lib (каждое - на новой строке)

8. Вот здесь нужно отдельные настройки для разных конфигураций: В разделе Linker - Input в меню Additional Dependencies добавляете libyaml-cppmdd.lib (для конфигурации Debug) и libyaml-cppmd.lib (для конфигурации Release)

9. После этого в раздел "Source files" можно добавить файл Kappa/tests/particles/particleProperties.cpp и скомпилировать проект (вроде по умолчанию он будет собран в конфигурации Debug, это выбирается наверху окна Visual Studio.

Если все удачно собралось, Visual Studio в выводе напишет, где лежит exe-файл. Скорее всего, что-то в духе Kappa-build/x64/Debug/Kappa.exe. 

Для работы программы также надо взять файлы lapack_win64_MT.dll и blas_win64_MT.dll из Armadillo/examples/lib_win64, скопировать их в директорию с запускаемым exe-файлом, а также скопировать в эту директорию файлы баз данных particles.yaml и interaction.yaml. Запускаете exe-файл, в консоли должны выводиться количества уровней различных степеней свободы.
Если собирали проект в конфигурации Debug, то сначала будет долго загружать данные, т.к. производится расчет энергий всех состояний. Если собирать в конфигурации Release, то все будет работать намного быстрее.
